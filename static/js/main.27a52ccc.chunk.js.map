{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","timerDays","setTimerDays","timerHours","setTimerHours","timerMinutes","setTimerMinutes","timerSeconds","setTimerSeconds","interval","useRef","useEffect","countdownDate","Date","getTime","setInterval","now","distance","days","Math","floor","hours","minutes","seconds","clearInterval","current","startTimer","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gOAkFeA,G,MA9EH,WAAO,IAAD,EACkBC,mBAAS,MAD3B,mBACTC,EADS,KACEC,EADF,OAEoBF,mBAAS,MAF7B,mBAETG,EAFS,KAEGC,EAFH,OAGwBJ,mBAAS,MAHjC,mBAGTK,EAHS,KAGKC,EAHL,OAIwBN,mBAAS,MAJjC,mBAITO,EAJS,KAIKC,EAJL,KAMZC,EAAWC,mBAoCf,OAPAC,qBAAU,WAER,OA7BiB,WACjB,IAAMC,EAAgB,IAAIC,KAAK,wBAAwBC,UAEvDL,EAAWM,aAAY,WACrB,IAAMC,GAAM,IAAIH,MAAOC,UACjBG,EAAWL,EAAgBI,EAE3BE,EAAOC,KAAKC,MAAMH,EAAQ,OAC1BI,EAAQF,KAAKC,MAAOH,EAAQ,MAAR,MACpBK,EAAUH,KAAKC,MAAOH,EAAQ,KAAR,KACtBM,EAAUJ,KAAKC,MAAOH,EAAQ,IAAkB,KAElDA,EAAW,EAEbO,cAAcf,EAASgB,UAGvBvB,EAAagB,GACbd,EAAciB,GACdf,EAAgBgB,GAChBd,EAAgBe,MAGjB,KAKHG,GACO,WACLF,cAAcf,EAASgB,aAKzB,yBAASE,UAAU,kBAAnB,SAEI,0BAASA,UAAU,QAAnB,UACE,gCACE,sBAAMA,UAAU,sCAChB,iDACA,mFAEF,sBAAKA,UAAU,YAAf,UACE,oCACE,4BAAI1B,IACJ,4BAAG,8CAEL,qCACA,oCACE,4BAAIE,IACJ,4BAAG,+CAEL,qCACA,oCACE,4BAAIE,IACJ,4BAAG,iDAEL,qCACA,oCACE,4BAAIE,IACJ,4BAAG,2DC7DFqB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.27a52ccc.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport './App.css';\n\n\nconst App = () => {\n  const [timerDays, setTimerDays] = useState('00')\n  const [timerHours, setTimerHours] = useState('00')\n  const [timerMinutes, setTimerMinutes] = useState('00')\n  const [timerSeconds, setTimerSeconds] = useState('00')\n\n  let interval = useRef();\n\n  const startTimer = () => {\n    const countdownDate = new Date('Dec 11 2020 00:00:00').getTime();\n\n    interval = setInterval(() => {\n      const now = new Date().getTime();\n      const distance = countdownDate - now;\n\n      const days = Math.floor(distance / (1000 * 60 * 60 * 24));\n      const hours = Math.floor((distance % (1000 * 60 * 60 * 24) / (1000 * 60 * 60)));\n      const minutes = Math.floor((distance % (1000 * 60 * 60) / (1000 * 60)));\n      const seconds = Math.floor((distance % (1000 * 60)) / 1000);\n\n      if (distance < 0) {\n        // stop timer\n        clearInterval(interval.current);\n      } else {\n        // update timer\n        setTimerDays(days);\n        setTimerHours(hours);\n        setTimerMinutes(minutes);\n        setTimerSeconds(seconds);\n      }\n\n    }, 1000);\n  }\n\n  //componentDidMount\n  useEffect(() => {\n    startTimer();\n    return () => {\n      clearInterval(interval.current);\n    };\n  })\n\n  return (\n    <section className=\"timer-container\">\n\n        <section className=\"timer\">\n          <div>\n            <span className=\"mdi mdi-calendar-clock timer-icon\"></span>\n            <h2>Countdown Timer</h2>\n            <p>Countdown to the day you finish your intership!</p>\n          </div>\n          <div className=\"container\">\n            <section>\n              <p>{timerDays}</p>\n              <p><small>Days</small></p>\n            </section>\n            <span>:</span>\n            <section>\n              <p>{timerHours}</p>\n              <p><small>Hours</small></p>\n            </section>\n            <span>:</span>\n            <section>\n              <p>{timerMinutes}</p>\n              <p><small>Minutes</small></p>\n            </section>\n            <span>:</span>\n            <section>\n              <p>{timerSeconds}</p>\n              <p><small>Seconds</small></p>\n            </section>\n          </div>\n        </section>\n\n    </section>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}